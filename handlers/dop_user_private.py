import os
from typing import Optional
from aiogram import Router, F
from aiogram.types import FSInputFile, CallbackQuery, Message
from database.models import OrderFSM
from filters.chat_types import ChatTypeFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –∏–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∞
from dotenv import load_dotenv

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ
from kbds import inline
from text_message import text


load_dotenv()

GROUP_ID_ENV = os.getenv("GROUP_ID")
GROUP_ID: Optional[int] = (
    int(GROUP_ID_ENV) if GROUP_ID_ENV and GROUP_ID_ENV.isdigit() else None
)

dop_user_private_router = Router()
dop_user_private_router.message.filter(ChatTypeFilter(['private']))


# –•–µ–Ω–¥–ª–µ—Ä—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –±–æ—Ç–∞
@dop_user_private_router.callback_query(F.data.startswith('final_catalog'))
async def handler_final(callback: CallbackQuery):
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    catalog_link = "https://www.avito.ru/irkutsk/nedvizhimost"
    message_text = text.sample_url_text

    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", url=catalog_link)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="return_")],
        ]
    )
    await callback.message.answer(
        message_text,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=link_button,
    )

    await callback.answer()


@dop_user_private_router.callback_query(F.data.startswith('final_updates'))
async def handler_updates(callback: CallbackQuery):
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    group_link = "https://t.me/+DDiXtpAlb7AxZmIy"
    message_text = text.sample_url_text

    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É", url=group_link)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="return_")],
        ]
    )
    await callback.message.answer(
        message_text,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=link_button,
    )

    await callback.answer()


@dop_user_private_router.callback_query(F.data.startswith('final_question'))
async def handler_question(callback: CallbackQuery):
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    admin_link = "https://t.me/DebugDemon_101"
    message_text = text.sample_url_text

    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", url=admin_link)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="return_")],
        ]
    )
    await callback.message.answer(
        message_text,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=link_button,
    )

    await callback.answer()


@dop_user_private_router.callback_query(F.data.startswith('return_'))
async def handler_back(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.edit_text(
            text.choice_text, reply_markup=inline.inline_final
        )
        await callback.answer()
