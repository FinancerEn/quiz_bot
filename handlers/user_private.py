import os
from typing import Optional
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, CallbackQuery, Message
from database.models import OrderFSM
from filters.chat_types import ChatTypeFilter
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –∏–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∞
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç Bold –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω—ã–º
from aiogram.utils.formatting import Bold

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ
from text_message import text
from kbds import inline

load_dotenv()

GROUP_ID_ENV = os.getenv("GROUP_ID")
GROUP_ID: Optional[int] = (
    int(GROUP_ID_ENV) if GROUP_ID_ENV and GROUP_ID_ENV.isdigit() else None
)

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


class UserState(StatesGroup):
    start = State()  # –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
    type_property = State()  # –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    budget = State()  # –ë—é–¥–∂–µ—Ç
    district = State()  # –†–∞–π–æ–Ω
    specifications = State()  # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    custom_specification = State()  # –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    contacts = State()  # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    name = State()  # –ò–º—è


# –°–ª–æ–≤–∞—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
START_NAMES = {
    "test": "‚úÖ ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª",
    "interesting": "‚ùå ¬´–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ¬ª",
}

PROPERTY_NAMES = {
    "apartment": "1Ô∏è‚É£ –ö–≤–∞—Ä—Ç–∏—Ä–∞",
    "commercial": "2Ô∏è‚É£ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    "house": "3Ô∏è‚É£ –î–æ–º",
    "room": "4Ô∏è‚É£ –ö–æ–º–Ω–∞—Ç–∞"
}

BUDGET_NAMES = {
    "low": "üíµ ¬´–î–æ 3 –º–ª–Ω ‚ÇΩ¬ª",
    "medium": "üíµ ¬´3‚Äì6 –º–ª–Ω ‚ÇΩ¬ª",
    "high": "üíµ ¬´6‚Äì10 –º–ª–Ω ‚ÇΩ¬ª",
    "high_xx": "üíµ ¬´–ë–æ–ª–µ–µ 10 –º–ª–Ω ‚ÇΩ¬ª"
}

DISTRICT_NAMES = {
    "center": "üèô ¬´–¶–µ–Ω—Ç—Ä¬ª",
    "kirovskiy": "¬´–ö–∏—Ä–æ–≤—Å–∫–∏–π¬ª",
    "kuibyshevskiy": "¬´–ö—É–π–±—ã—à–µ–≤—Å–∫–∏–π¬ª",
    "leninskiy": "¬´–õ–µ–Ω–∏–Ω—Å–∫–∏–π¬ª",
    "oktyabrskiy": "¬´–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π¬ª",
    "sverdlovskiy": "¬´–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π¬ª",
    "outside": "¬´–ó–∞ –≥–æ—Ä–æ–¥–æ–º¬ª"
}

SPECIFICATIONS_NAMES = {
    "balcony": "‚úÖ ¬´–ë–∞–ª–∫–æ–Ω¬ª",
    "parking": "‚úÖ ¬´–ü–∞—Ä–∫–æ–≤–∫–∞¬ª",
    "newfinish": "‚úÖ ¬´–ù–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞¬ª",
    "park": "‚úÖ ¬´–†—è–¥–æ–º —Å –ø–∞—Ä–∫–æ–º¬ª",
    "next": "‚úÖ ¬´–ë–æ–ª—å—à–∞—è –∫—É—Ö–Ω—è¬ª"
}


@user_private_router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    user_name = message.from_user.first_name if message.from_user else '–í—ã'
    user_id = message.from_user.id if message.from_user else 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(user_id=user_id, user_name=user_name)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UserState.type_property)

    photo = FSInputFile('images/start_image.webp')
    await message.answer_photo(photo)
    await message.answer(f"{user_name} {text.greeting}", reply_markup=inline.inline_keyboard_main)


@user_private_router.callback_query(F.data.startswith("take_test"))
async def handle_start_test(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    type_start = callback.data.split("_")[1]
    user_choice = START_NAMES.get(type_start, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    if isinstance(callback.message, Message):
        await state.update_data(start=user_choice)
        await state.set_state(UserState.type_property)

        await callback.message.edit_text(
            text.text_type_of_property, reply_markup=inline.inline_type_of_property
        )
        await callback.answer()


@user_private_router.callback_query(F.data.startswith('property_'))
async def handler_property_text(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    type_housing = callback.data.split('_')[1]
    user_choice = PROPERTY_NAMES.get(type_housing, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    texts = Bold(f"üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å? \n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}")

    await state.update_data(type_property=user_choice)
    await state.set_state(UserState.budget)
    if isinstance(callback.message, Message):
        await callback.message.edit_text(texts.as_html(), parse_mode="HTML",
                                         reply_markup=inline.inline_budget)
        await callback.answer()


@user_private_router.callback_query(F.data.startswith('budget_'))
async def handler_budget(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    type_budget = callback.data.split('_')[1]
    user_choice = BUDGET_NAMES.get(type_budget, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    texts = Bold(f"üìç –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∂–∏—Ç—å? \n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}")
    await state.update_data(budget=user_choice)
    await state.set_state(UserState.district)
    if isinstance(callback.message, Message):
        await callback.message.edit_text(
            texts.as_html(), parse_mode="HTML", reply_markup=inline.inline_district
        )
        await callback.answer()


@user_private_router.callback_query(F.data.startswith('district_'))
async def handle_district(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    type_district = callback.data.split('_')[1]
    user_choice = DISTRICT_NAMES.get(type_district, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    texts = Bold(f"üîé –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∏–ª—å—è? (–í—ã–±–µ—Ä–∏ –¥–æ 3 –ø—É–Ω–∫—Ç–æ–≤)"
                 f"\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}")
    await state.update_data(district=user_choice)
    await state.set_state(UserState.specifications)
    if isinstance(callback.message, Message):
        await callback.message.edit_text(
            texts.as_html(), parse_mode="HTML", reply_markup=inline.inline_specifications
        )
        await callback.answer()


@user_private_router.callback_query(F.data.startswith('specifications_'))
async def handle_specifications(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return

    selected_option = callback.data.split('_')[1]
    user_choice = SPECIFICATIONS_NAMES.get(selected_option, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    if isinstance(callback.message, Message):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        user_data = await state.get_data()
        selected_specs = user_data.get('selected_specifications', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_choice –Ω–µ None
        if user_choice and user_choice != "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            if user_choice in selected_specs:
                selected_specs.remove(user_choice)
            else:
                selected_specs.append(user_choice)

        await state.update_data(selected_specifications=selected_specs)

        if selected_option == 'mine':
            await state.set_state(UserState.custom_specification)
            await callback.message.edit_text('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=inline.inline_keyboard_back)
            await callback.answer()
            return

        if selected_option == "next":
            await state.set_state(UserState.contacts)
            await callback.message.edit_text('üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏',
                                             reply_markup=inline.inline_keyboard_back)
            await callback.answer()
            return

        selected_specs = [spec for spec in selected_specs if isinstance(spec, str)]
        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(selected_specs)}")


@user_private_router.message(UserState.custom_specification, F.text)
async def handler_your_version(message: Message, state: FSMContext):
    await state.update_data(custom_specification=message.text)
    await state.set_state(UserState.contacts)
    await message.answer(
        'üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏',
        reply_markup=inline.inline_keyboard_back
    )


@user_private_router.message(UserState.contacts, F.text)
async def handler_custom_specification_contacts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç
    if current_state == "UserState:custom_specification":
        await state.update_data(custom_specification=message.text)
    else:
        await state.update_data(contacts=message.text)

    # !!! –¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ !!!
    user_data = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ FSM: {user_data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    start = user_data.get("start", "‚ùå ¬´–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ¬ª")
    type_property = user_data.get("type_property", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    budget = user_data.get("budget", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    district = user_data.get("district", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    specifications = ", ".join(user_data.get("selected_specifications", []))
    custom_specification = user_data.get("custom_specification", "")  # –¢–µ–ø–µ—Ä—å –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ—Ç—Å—è!
    contacts = user_data.get("contacts", "")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º
    if "custom_specification" not in user_data:
        custom_specification = ""

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    order = OrderFSM(
        user_id=message.from_user.id if message.from_user else 0,
        user_name=message.from_user.full_name if message.from_user else "–ê–Ω–æ–Ω–∏–º",
        start=start,
        type_property=type_property,
        budget=budget,
        district=district,
        specifications=specifications,
        custom_specification=custom_specification,
        contacts=contacts
    )

    order_info = (
        f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ quiz –±–æ—Ç–µ!*\n"
        f"üë§ –ò–º—è: {order.user_name}\n"
        f"üë§ start: {order.start}\n"
        f"üè° –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {order.type_property}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {order.budget}\n"
        f"üìç –†–∞–π–æ–Ω: {order.district}\n"
        f"üìå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {order.specifications}\n"
        f"‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: {order.custom_specification if order.custom_specification else '‚Äî'}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order.contacts}\n"
        f"üîó ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.user_id}"
    )

    if GROUP_ID_ENV and message.bot:
        await message.bot.send_message(GROUP_ID_ENV, order_info, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer('–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π. –ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!',
                         reply_markup=inline.inline_final)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await state.clear()


@user_private_router.callback_query(F.data.startswith('back_'))
async def handler_back(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)  # –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ None
    await state.update_data({})  # –£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FSM
    if isinstance(callback.message, Message):
        await callback.message.edit_text(
            text.text_type_of_property, reply_markup=inline.inline_type_of_property
        )
        await callback.answer()
