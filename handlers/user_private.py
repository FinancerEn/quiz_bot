from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, CallbackQuery, Message
from filters.chat_types import ChatTypeFilter
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç Bold –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω—ã–º
# from aiogram.utils.formatting import Bold

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ
from text_message import text
from kbds import inline


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


class UserState(StatesGroup):
    type_property = State()  # –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    budget = State()  # –ë—é–¥–∂–µ—Ç
    district = State()  # –†–∞–π–æ–Ω
    specifications = State()  # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    contacts = State()  # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    name = State()  # –ò–º—è


@user_private_router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    user_name = message.from_user.first_name if message.from_user else "–í—ã"
    user_id = message.from_user.id if message.from_user else 0  # ID —é–∑–µ—Ä–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(user_id=user_id, user_name=user_name)

    photo = FSInputFile("images/start_image.webp")
    await message.answer_photo(photo)
    await message.answer(f"{user_name} {text.greeting}", reply_markup=inline.inline_keyboard_main)


@user_private_router.callback_query(F.data.startswith("take_test"))
async def handle_start_test(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return

    type_housing = callback.data.split("_")[1]
    if isinstance(callback.message, Message):
        await state.update_data(type_property=type_housing)
        await state.set_state(UserState.budget)

        await callback.message.edit_text(
            text.text_type_of_property, reply_markup=inline.inline_type_of_property
        )
        await callback.answer()


@user_private_router.message(UserState.budget, F.text)
async def handle_save_wishes(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await state.set_state(UserState.district)
    await message.answer('üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å?')


# # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π:
# # 1)–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è 2)–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
# @user_private_router.message(UserState.name, F.text)
# async def handle_name(message: Message, state: FSMContext):
#     """–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
#     await state.update_data(name=message.text)

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
#     await save_to_google_sheets(state)

#     await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")

#     # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
#     await state.clear()
